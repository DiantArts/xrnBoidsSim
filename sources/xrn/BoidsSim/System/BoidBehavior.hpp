#pragma once

namespace xrn::bsim::system {

///////////////////////////////////////////////////////////////////////////
/// \brief Scene of the came
/// \ingroup game
///
/// \include Scene.hpp <Game/Scene.hpp>
///
///////////////////////////////////////////////////////////////////////////
class BoidBehavior
{

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Component aliases
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    using Position = ::xrn::engine::component::Position;
    using Velocity = ::xrn::engine::component::Velocity;
    using Acceleration = ::xrn::engine::component::Acceleration;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Static
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    // static inline constexpr const ::std::size_t numberOfBoids{ 1000 };
    static inline constexpr const ::std::size_t numberOfBoids{ 0 };
    static inline constexpr const float minSpeed{ 25.f };
    static inline constexpr const float maxSpeed{ 50.f };

    struct Boid {}; // Signature type to assign



public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Basic
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    ///
    ///////////////////////////////////////////////////////////////////////////
    void update(
        ::entt::entity boid
        , BoidBehavior::Position& position [[ maybe_unused ]]
        , BoidBehavior::Velocity& velocity [[ maybe_unused ]]
        , BoidBehavior::Acceleration& acceleration [[ maybe_unused ]]
        , const auto& boids
    ) const;



private:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Member variables
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    float m_perceptionRadius{ 30.f };

    struct Information {
        float force;
    };
    BoidBehavior::Information m_cohesionInfo{ .force = 35.f };
    BoidBehavior::Information m_alignmentInfo{ .force = 100.f };
    BoidBehavior::Information m_seperationInfo{ .force = 50.f };


};

} // namespace xrn::bsim::system

///////////////////////////////////////////////////////////////////////////
// Header-implimentation
///////////////////////////////////////////////////////////////////////////
#include <xrn/BoidsSim/System/BoidBehavior.impl.hpp>
